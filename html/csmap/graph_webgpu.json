{
  "converted_at": 1513922921,
  "kernel_source": "\n#include <metal_stdlib>\nusing namespace metal;\n\n#define OPTIMIZE 1\n\nkernel void transpose_1a0fbadea0475062956fc679399ce2f40129cb877aec049982efb309(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    device float * v2 = (static_buffer + meta_buffer[1]);\n    const int v3 = meta_buffer[2];\n    const int v4 = meta_buffer[3];\n    const int D0 = meta_buffer[4];\n    const int D1 = meta_buffer[5];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            const float v5 = v1[d0*v3 + d1];\n            float v6;\n            {\n                v6 = v5;\n            }\n            v2[d0 + d1*v4] = v6;\n        }\n    }\n}\n\n\nkernel void im2col_9b539f2f74232353e897aa9134c69cfa1ee49d2b6fa3daf025ab98c3(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint index[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float *im = (static_buffer + meta_buffer[0]);\n    device float *col = (static_buffer + meta_buffer[1]);\n\n    const int N = meta_buffer[2];\n    const int C1 = meta_buffer[3];\n    const int H1 = meta_buffer[4];\n    const int W1 = meta_buffer[5];\n    const int H2 = meta_buffer[6];\n    const int W2 = meta_buffer[7];\n    const int KH = meta_buffer[8];\n    const int KW = meta_buffer[9];\n    const int DH = meta_buffer[10];\n    const int DW = meta_buffer[11];\n    const int SH = meta_buffer[12];\n    const int SW = meta_buffer[13];\n    const int PH = meta_buffer[14];\n    const int PW = meta_buffer[15];\n\n    for (int gid = index; gid < N*H2*W2*KH*KW*C1; gid += num_threads) {\n        const int w2 = gid % W2;\n        const int h2 = gid / W2 % H2;\n        const int  n = gid / W2 / H2 % N;\n        const int c1 = gid / W2 / H2 / N % C1;\n        const int kw = gid / W2 / H2 / N / C1 % KW;\n        const int kh = gid / W2 / H2 / N / C1 / KW;\n\n        const int h1 = h2 * SH - PH + kh * DH;\n        const int w1 = w2 * SW - PW + kw * DW;\n\n        col[gid] = (h1 < 0 || h1 >= H1 || w1 < 0 || w1 >= W1) ? 0 : im[((n*H1+h1)*W1+w1)*C1+c1];\n    }\n}\n\n\nkernel void tensordot_27f826931ad3bbbc871d7c8749f50988981500cf1d2bdbdb0e7e1157(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint index[[thread_index_in_threadgroup]],\n                          uint2 group_position[[threadgroup_position_in_grid]])\n{\n#define M_DIVIDABLE_BY_64 1\n#define N_DIVIDABLE_BY_64 1\n#define K_DIVIDABLE_BY_8 0\n\n#define A_STRIDE_K M\n#define A_STRIDE_M 1\n\n#define B_STRIDE_K N\n#define B_STRIDE_N 1\n\n#if K_DIVIDABLE_BY_8 && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64 && OPTIMIZE\n    const device float4 *load_target4 = (index & 32)\n        ? (const device float4 *)((static_buffer + meta_buffer[1]))\n        : (const device float4 *)((static_buffer + meta_buffer[0]));\n#else\n    const device float *load_target = (index & 32)\n        ? ((static_buffer + meta_buffer[1]))\n        : ((static_buffer + meta_buffer[0]));\n#endif\n\n    const int M = meta_buffer[3];\n    const int N = meta_buffer[4];\n\n    const int K = meta_buffer[5];\n\n    threadgroup float4 shared4[32 * 8 * 2];\n\n    const int stride_k = (index & 32) ? B_STRIDE_K : A_STRIDE_K;\n    const int stride_mn = (index & 32) ? B_STRIDE_N : A_STRIDE_M;\n\n    const int m_offset = index & 7;\n    const int n_offset = index >> 3;\n\n    const int mn_load_offset = ((index & 32) ? group_position.y : group_position.x) * 64 + (index & 15) * 4;\n    const int k_load_offset = ((index & 16) ? 1 : 0);\n\n    int track0 = mn_load_offset * stride_mn + (k_load_offset + 0) * stride_k;\n    int track2 = track0 + 2 * stride_k;\n    int track4 = track0 + 4 * stride_k;\n    int track6 = track0 + 6 * stride_k;\n\n#if !OPTIMIZE || !M_DIVIDABLE_BY_64 || !N_DIVIDABLE_BY_64\n    const int max_MN = (index & 32) ? N : M;\n#endif\n\n    int shared_offset4 = ((index & 32) ? 16 : 0) + k_load_offset * 32 + (index & 15);\n    int read_A_offset4 = m_offset * 2;\n    int read_B_offset4 = n_offset * 2 + 16;\n\n    float4 result[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n    int k = 0;\n\n    while (k < K)\n    {\n        {\n#if OPTIMIZE && K_DIVIDABLE_BY_8\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n        #if OPTIMIZE\n            shared4[shared_offset4 + 32 * 0] = load_target4[track0 >> 2];\n            shared4[shared_offset4 + 32 * 2] = load_target4[track2 >> 2];\n            shared4[shared_offset4 + 32 * 4] = load_target4[track4 >> 2];\n            shared4[shared_offset4 + 32 * 6] = load_target4[track6 >> 2];\n        #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                load_target[track0 + stride_mn * 0],\n                load_target[track0 + stride_mn * 1],\n                load_target[track0 + stride_mn * 2],\n                load_target[track0 + stride_mn * 3]\n            );\n            shared4[shared_offset4 + 32 * 2] = float4(\n                load_target[track2 + stride_mn * 0],\n                load_target[track2 + stride_mn * 1],\n                load_target[track2 + stride_mn * 2],\n                load_target[track2 + stride_mn * 3]\n            );\n            shared4[shared_offset4 + 32 * 4] = float4(\n                load_target[track4 + stride_mn * 0],\n                load_target[track4 + stride_mn * 1],\n                load_target[track4 + stride_mn * 2],\n                load_target[track4 + stride_mn * 3]\n            );\n            shared4[shared_offset4 + 32 * 6] = float4(\n                load_target[track6 + stride_mn * 0],\n                load_target[track6 + stride_mn * 1],\n                load_target[track6 + stride_mn * 2],\n                load_target[track6 + stride_mn * 3]\n            );\n        #endif\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            );\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            );\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            );\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            );\n    #endif\n\n            k += 8;\n#else\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 3]\n            );\n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 3]\n            );\n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 3]\n            );\n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 3]\n            );\n            k += 2;\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            );\n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            );\n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            );\n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            );\n            k += 2;\n    #endif\n#endif\n        }\n\n        threadgroup_barrier(mem_flags::mem_threadgroup);\n\n        {\n            for (int k_sub = 0; k_sub < 8; k_sub++)\n            {\n                float4 a00 = shared4[32 * k_sub + read_A_offset4 + 0];\n                float4 a01 = shared4[32 * k_sub + read_A_offset4 + 1];\n                float4 b00 = shared4[32 * k_sub + read_B_offset4 + 0];\n                float4 b01 = shared4[32 * k_sub + read_B_offset4 + 1];\n\n                result[4][0]  += b00[0] * a00[2];\n                result[4][1]  += b00[1] * a00[2];\n                result[0][1]  += b00[1] * a00[0];\n                result[0][0]  += b00[0] * a00[0];\n                result[6][0]  += b00[0] * a00[3];\n                result[6][1]  += b00[1] * a00[3];\n                result[2][1]  += b00[1] * a00[1];\n                result[2][0]  += b00[0] * a00[1];\n                result[12][0] += b00[0] * a01[2];\n                result[12][1] += b00[1] * a01[2];\n                result[8][1]  += b00[1] * a01[0];\n                result[8][0]  += b00[0] * a01[0];\n                result[14][0] += b00[0] * a01[3];\n                result[14][1] += b00[1] * a01[3];\n                result[10][1] += b00[1] * a01[1];\n                result[10][0] += b00[0] * a01[1];\n\n                result[14][2] += b00[2] * a01[3];\n                result[14][3] += b00[3] * a01[3];\n                result[10][3] += b00[3] * a01[1];\n                result[10][2] += b00[2] * a01[1];\n                result[12][2] += b00[2] * a01[2];\n                result[12][3] += b00[3] * a01[2];\n                result[8][3]  += b00[3] * a01[0];\n                result[8][2]  += b00[2] * a01[0];\n                result[6][2]  += b00[2] * a00[3];\n                result[6][3]  += b00[3] * a00[3];\n                result[2][3]  += b00[3] * a00[1];\n                result[2][2]  += b00[2] * a00[1];\n                result[4][2]  += b00[2] * a00[2];\n                result[4][3]  += b00[3] * a00[2];\n                result[0][3]  += b00[3] * a00[0];\n                result[0][2]  += b00[2] * a00[0];\n\n                result[5][0]  += b01[0] * a00[2];\n                result[5][1]  += b01[1] * a00[2];\n                result[1][1]  += b01[1] * a00[0];\n                result[1][0]  += b01[0] * a00[0];\n                result[7][0]  += b01[0] * a00[3];\n                result[7][1]  += b01[1] * a00[3];\n                result[3][1]  += b01[1] * a00[1];\n                result[3][0]  += b01[0] * a00[1];\n                result[13][0] += b01[0] * a01[2];\n                result[13][1] += b01[1] * a01[2];\n                result[9][1]  += b01[1] * a01[0];\n                result[9][0]  += b01[0] * a01[0];\n                result[15][0] += b01[0] * a01[3];\n                result[15][1] += b01[1] * a01[3];\n                result[11][1] += b01[1] * a01[1];\n                result[11][0] += b01[0] * a01[1];\n\n                result[15][2] += b01[2] * a01[3];\n                result[15][3] += b01[3] * a01[3];\n                result[11][3] += b01[3] * a01[1];\n                result[11][2] += b01[2] * a01[1];\n                result[13][2] += b01[2] * a01[2];\n                result[13][3] += b01[3] * a01[2];\n                result[9][3]  += b01[3] * a01[0];\n                result[9][2]  += b01[2] * a01[0];\n                result[7][2]  += b01[2] * a00[3];\n                result[7][3]  += b01[3] * a00[3];\n                result[3][3]  += b01[3] * a00[1];\n                result[3][2]  += b01[2] * a00[1];\n                result[5][2]  += b01[2] * a00[2];\n                result[5][3]  += b01[3] * a00[2];\n                result[1][3]  += b01[3] * a00[0];\n                result[1][2]  += b01[2] * a00[0];\n            }\n        }\n\n        shared_offset4 ^= 32 * 8;\n        read_A_offset4 ^= 32 * 8;\n        read_B_offset4 ^= 32 * 8;\n        track0 += stride_k * 8;\n        track2 += stride_k * 8;\n        track4 += stride_k * 8;\n        track6 += stride_k * 8;\n    }\n\n    {\n\n#if OPTIMIZE && N_DIVIDABLE_BY_64\n        device float4 *C4 = (device float4 *)((static_buffer + meta_buffer[2]));\n        const int N4 = N >> 2;\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n\n    #if !M_DIVIDABLE_BY_64\n            if (m >= M) continue;\n    #endif\n\n            const int n = group_position.y * 16 + n_offset * 2;\n            float4 result0 = result[m_sub * 2 + 0];\n            float4 result1 = result[m_sub * 2 + 1];\n\n            C4[m * N4 + n + 0] = result0;\n            C4[m * N4 + n + 1] = result1;\n\n            m++;\n        }\n#else\n        device float *C = (static_buffer + meta_buffer[2]);\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n            int n = group_position.y * 64 + n_offset * 8;\n\n            for (int n_sub1 = 0; n_sub1 < 2; n_sub1++)\n            {\n                for (int n_sub2 = 0; n_sub2 < 4; n_sub2++)\n                {\n\n    #if OPTIMIZE && M_DIVIDABLE_BY_64\n                    (         n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2]) : 0;\n    #else\n                    (m < M && n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2]) : 0;\n    #endif\n                    n++;\n                }\n            }\n\n            m++;\n        }\n#endif\n\n    }\n\n#undef M_DIVIDABLE_BY_64\n#undef N_DIVIDABLE_BY_64\n#undef K_DIVIDABLE_BY_8\n#undef A_STRIDE_K\n#undef B_STRIDE_K\n#undef A_STRIDE_M\n#undef B_STRIDE_N\n}\n\n\nkernel void fusedelementwise_7021fa13d8ceacf13894bee6562fcff147688e654e265c301d0aeaf6(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    device float * v3 = (static_buffer + meta_buffer[2]);\n    const int v4 = meta_buffer[3];\n    const int v5 = meta_buffer[4];\n    const int D0 = meta_buffer[5];\n    const int D1 = meta_buffer[6];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v6 = v1[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            const float v7 = v2[d0 + d1*v4];\n            float v8;\n            {\n                v8 = v7 + v6;\n            }\n            float v9;\n            {\n                const float slope = *((device float *)(&meta_buffer[7]));\n                v9 = v8 > 0 ? v8 : (v8 * slope);\n            }\n            v3[d0*v5 + d1] = v9;\n        }\n    }\n}\n\n\nkernel void tensordot_291ea7d32ad11e41e6bd4219499a657cb96247731a43990b62e2f287(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint index[[thread_index_in_threadgroup]],\n                          uint2 group_position[[threadgroup_position_in_grid]])\n{\n#define M_DIVIDABLE_BY_64 1\n#define N_DIVIDABLE_BY_64 1\n#define K_DIVIDABLE_BY_8 1\n\n#define A_STRIDE_K M\n#define A_STRIDE_M 1\n\n#define B_STRIDE_K N\n#define B_STRIDE_N 1\n\n#if K_DIVIDABLE_BY_8 && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64 && OPTIMIZE\n    const device float4 *load_target4 = (index & 32)\n        ? (const device float4 *)((static_buffer + meta_buffer[1]))\n        : (const device float4 *)((static_buffer + meta_buffer[0]));\n#else\n    const device float *load_target = (index & 32)\n        ? ((static_buffer + meta_buffer[1]))\n        : ((static_buffer + meta_buffer[0]));\n#endif\n\n    const int M = meta_buffer[3];\n    const int N = meta_buffer[4];\n\n    const int K = meta_buffer[5];\n\n    threadgroup float4 shared4[32 * 8 * 2];\n\n    const int stride_k = (index & 32) ? B_STRIDE_K : A_STRIDE_K;\n    const int stride_mn = (index & 32) ? B_STRIDE_N : A_STRIDE_M;\n\n    const int m_offset = index & 7;\n    const int n_offset = index >> 3;\n\n    const int mn_load_offset = ((index & 32) ? group_position.y : group_position.x) * 64 + (index & 15) * 4;\n    const int k_load_offset = ((index & 16) ? 1 : 0);\n\n    int track0 = mn_load_offset * stride_mn + (k_load_offset + 0) * stride_k;\n    int track2 = track0 + 2 * stride_k;\n    int track4 = track0 + 4 * stride_k;\n    int track6 = track0 + 6 * stride_k;\n\n#if !OPTIMIZE || !M_DIVIDABLE_BY_64 || !N_DIVIDABLE_BY_64\n    const int max_MN = (index & 32) ? N : M;\n#endif\n\n    int shared_offset4 = ((index & 32) ? 16 : 0) + k_load_offset * 32 + (index & 15);\n    int read_A_offset4 = m_offset * 2;\n    int read_B_offset4 = n_offset * 2 + 16;\n\n    float4 result[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n    int k = 0;\n\n    while (k < K)\n    {\n        {\n#if OPTIMIZE && K_DIVIDABLE_BY_8\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n        #if OPTIMIZE\n            shared4[shared_offset4 + 32 * 0] = load_target4[track0 >> 2];\n            shared4[shared_offset4 + 32 * 2] = load_target4[track2 >> 2];\n            shared4[shared_offset4 + 32 * 4] = load_target4[track4 >> 2];\n            shared4[shared_offset4 + 32 * 6] = load_target4[track6 >> 2];\n        #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                load_target[track0 + stride_mn * 0],\n                load_target[track0 + stride_mn * 1],\n                load_target[track0 + stride_mn * 2],\n                load_target[track0 + stride_mn * 3]\n            );\n            shared4[shared_offset4 + 32 * 2] = float4(\n                load_target[track2 + stride_mn * 0],\n                load_target[track2 + stride_mn * 1],\n                load_target[track2 + stride_mn * 2],\n                load_target[track2 + stride_mn * 3]\n            );\n            shared4[shared_offset4 + 32 * 4] = float4(\n                load_target[track4 + stride_mn * 0],\n                load_target[track4 + stride_mn * 1],\n                load_target[track4 + stride_mn * 2],\n                load_target[track4 + stride_mn * 3]\n            );\n            shared4[shared_offset4 + 32 * 6] = float4(\n                load_target[track6 + stride_mn * 0],\n                load_target[track6 + stride_mn * 1],\n                load_target[track6 + stride_mn * 2],\n                load_target[track6 + stride_mn * 3]\n            );\n        #endif\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            );\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            );\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            );\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            );\n    #endif\n\n            k += 8;\n#else\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 3]\n            );\n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 3]\n            );\n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 3]\n            );\n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 3]\n            );\n            k += 2;\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            );\n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            );\n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            );\n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            );\n            k += 2;\n    #endif\n#endif\n        }\n\n        threadgroup_barrier(mem_flags::mem_threadgroup);\n\n        {\n            for (int k_sub = 0; k_sub < 8; k_sub++)\n            {\n                float4 a00 = shared4[32 * k_sub + read_A_offset4 + 0];\n                float4 a01 = shared4[32 * k_sub + read_A_offset4 + 1];\n                float4 b00 = shared4[32 * k_sub + read_B_offset4 + 0];\n                float4 b01 = shared4[32 * k_sub + read_B_offset4 + 1];\n\n                result[4][0]  += b00[0] * a00[2];\n                result[4][1]  += b00[1] * a00[2];\n                result[0][1]  += b00[1] * a00[0];\n                result[0][0]  += b00[0] * a00[0];\n                result[6][0]  += b00[0] * a00[3];\n                result[6][1]  += b00[1] * a00[3];\n                result[2][1]  += b00[1] * a00[1];\n                result[2][0]  += b00[0] * a00[1];\n                result[12][0] += b00[0] * a01[2];\n                result[12][1] += b00[1] * a01[2];\n                result[8][1]  += b00[1] * a01[0];\n                result[8][0]  += b00[0] * a01[0];\n                result[14][0] += b00[0] * a01[3];\n                result[14][1] += b00[1] * a01[3];\n                result[10][1] += b00[1] * a01[1];\n                result[10][0] += b00[0] * a01[1];\n\n                result[14][2] += b00[2] * a01[3];\n                result[14][3] += b00[3] * a01[3];\n                result[10][3] += b00[3] * a01[1];\n                result[10][2] += b00[2] * a01[1];\n                result[12][2] += b00[2] * a01[2];\n                result[12][3] += b00[3] * a01[2];\n                result[8][3]  += b00[3] * a01[0];\n                result[8][2]  += b00[2] * a01[0];\n                result[6][2]  += b00[2] * a00[3];\n                result[6][3]  += b00[3] * a00[3];\n                result[2][3]  += b00[3] * a00[1];\n                result[2][2]  += b00[2] * a00[1];\n                result[4][2]  += b00[2] * a00[2];\n                result[4][3]  += b00[3] * a00[2];\n                result[0][3]  += b00[3] * a00[0];\n                result[0][2]  += b00[2] * a00[0];\n\n                result[5][0]  += b01[0] * a00[2];\n                result[5][1]  += b01[1] * a00[2];\n                result[1][1]  += b01[1] * a00[0];\n                result[1][0]  += b01[0] * a00[0];\n                result[7][0]  += b01[0] * a00[3];\n                result[7][1]  += b01[1] * a00[3];\n                result[3][1]  += b01[1] * a00[1];\n                result[3][0]  += b01[0] * a00[1];\n                result[13][0] += b01[0] * a01[2];\n                result[13][1] += b01[1] * a01[2];\n                result[9][1]  += b01[1] * a01[0];\n                result[9][0]  += b01[0] * a01[0];\n                result[15][0] += b01[0] * a01[3];\n                result[15][1] += b01[1] * a01[3];\n                result[11][1] += b01[1] * a01[1];\n                result[11][0] += b01[0] * a01[1];\n\n                result[15][2] += b01[2] * a01[3];\n                result[15][3] += b01[3] * a01[3];\n                result[11][3] += b01[3] * a01[1];\n                result[11][2] += b01[2] * a01[1];\n                result[13][2] += b01[2] * a01[2];\n                result[13][3] += b01[3] * a01[2];\n                result[9][3]  += b01[3] * a01[0];\n                result[9][2]  += b01[2] * a01[0];\n                result[7][2]  += b01[2] * a00[3];\n                result[7][3]  += b01[3] * a00[3];\n                result[3][3]  += b01[3] * a00[1];\n                result[3][2]  += b01[2] * a00[1];\n                result[5][2]  += b01[2] * a00[2];\n                result[5][3]  += b01[3] * a00[2];\n                result[1][3]  += b01[3] * a00[0];\n                result[1][2]  += b01[2] * a00[0];\n            }\n        }\n\n        shared_offset4 ^= 32 * 8;\n        read_A_offset4 ^= 32 * 8;\n        read_B_offset4 ^= 32 * 8;\n        track0 += stride_k * 8;\n        track2 += stride_k * 8;\n        track4 += stride_k * 8;\n        track6 += stride_k * 8;\n    }\n\n    {\n\n#if OPTIMIZE && N_DIVIDABLE_BY_64\n        device float4 *C4 = (device float4 *)((static_buffer + meta_buffer[2]));\n        const int N4 = N >> 2;\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n\n    #if !M_DIVIDABLE_BY_64\n            if (m >= M) continue;\n    #endif\n\n            const int n = group_position.y * 16 + n_offset * 2;\n            float4 result0 = result[m_sub * 2 + 0];\n            float4 result1 = result[m_sub * 2 + 1];\n\n            C4[m * N4 + n + 0] = result0;\n            C4[m * N4 + n + 1] = result1;\n\n            m++;\n        }\n#else\n        device float *C = (static_buffer + meta_buffer[2]);\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n            int n = group_position.y * 64 + n_offset * 8;\n\n            for (int n_sub1 = 0; n_sub1 < 2; n_sub1++)\n            {\n                for (int n_sub2 = 0; n_sub2 < 4; n_sub2++)\n                {\n\n    #if OPTIMIZE && M_DIVIDABLE_BY_64\n                    (         n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2]) : 0;\n    #else\n                    (m < M && n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2]) : 0;\n    #endif\n                    n++;\n                }\n            }\n\n            m++;\n        }\n#endif\n\n    }\n\n#undef M_DIVIDABLE_BY_64\n#undef N_DIVIDABLE_BY_64\n#undef K_DIVIDABLE_BY_8\n#undef A_STRIDE_K\n#undef B_STRIDE_K\n#undef A_STRIDE_M\n#undef B_STRIDE_N\n}\n\n\nkernel void tensordot_8d766979cae5f29c01864384bf3bb8b079fcad4e7542a36c6fc3f956(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint index[[thread_index_in_threadgroup]],\n                          uint2 group_position[[threadgroup_position_in_grid]])\n{\n#define M_DIVIDABLE_BY_64 0\n#define N_DIVIDABLE_BY_64 1\n#define K_DIVIDABLE_BY_8 1\n\n#define A_STRIDE_K M\n#define A_STRIDE_M 1\n\n#define B_STRIDE_K N\n#define B_STRIDE_N 1\n\n#if K_DIVIDABLE_BY_8 && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64 && OPTIMIZE\n    const device float4 *load_target4 = (index & 32)\n        ? (const device float4 *)((static_buffer + meta_buffer[1]))\n        : (const device float4 *)((static_buffer + meta_buffer[0]));\n#else\n    const device float *load_target = (index & 32)\n        ? ((static_buffer + meta_buffer[1]))\n        : ((static_buffer + meta_buffer[0]));\n#endif\n\n    const int M = meta_buffer[3];\n    const int N = meta_buffer[4];\n\n    const int K = meta_buffer[5];\n\n    threadgroup float4 shared4[32 * 8 * 2];\n\n    const int stride_k = (index & 32) ? B_STRIDE_K : A_STRIDE_K;\n    const int stride_mn = (index & 32) ? B_STRIDE_N : A_STRIDE_M;\n\n    const int m_offset = index & 7;\n    const int n_offset = index >> 3;\n\n    const int mn_load_offset = ((index & 32) ? group_position.y : group_position.x) * 64 + (index & 15) * 4;\n    const int k_load_offset = ((index & 16) ? 1 : 0);\n\n    int track0 = mn_load_offset * stride_mn + (k_load_offset + 0) * stride_k;\n    int track2 = track0 + 2 * stride_k;\n    int track4 = track0 + 4 * stride_k;\n    int track6 = track0 + 6 * stride_k;\n\n#if !OPTIMIZE || !M_DIVIDABLE_BY_64 || !N_DIVIDABLE_BY_64\n    const int max_MN = (index & 32) ? N : M;\n#endif\n\n    int shared_offset4 = ((index & 32) ? 16 : 0) + k_load_offset * 32 + (index & 15);\n    int read_A_offset4 = m_offset * 2;\n    int read_B_offset4 = n_offset * 2 + 16;\n\n    float4 result[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n    int k = 0;\n\n    while (k < K)\n    {\n        {\n#if OPTIMIZE && K_DIVIDABLE_BY_8\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n        #if OPTIMIZE\n            shared4[shared_offset4 + 32 * 0] = load_target4[track0 >> 2];\n            shared4[shared_offset4 + 32 * 2] = load_target4[track2 >> 2];\n            shared4[shared_offset4 + 32 * 4] = load_target4[track4 >> 2];\n            shared4[shared_offset4 + 32 * 6] = load_target4[track6 >> 2];\n        #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                load_target[track0 + stride_mn * 0],\n                load_target[track0 + stride_mn * 1],\n                load_target[track0 + stride_mn * 2],\n                load_target[track0 + stride_mn * 3]\n            );\n            shared4[shared_offset4 + 32 * 2] = float4(\n                load_target[track2 + stride_mn * 0],\n                load_target[track2 + stride_mn * 1],\n                load_target[track2 + stride_mn * 2],\n                load_target[track2 + stride_mn * 3]\n            );\n            shared4[shared_offset4 + 32 * 4] = float4(\n                load_target[track4 + stride_mn * 0],\n                load_target[track4 + stride_mn * 1],\n                load_target[track4 + stride_mn * 2],\n                load_target[track4 + stride_mn * 3]\n            );\n            shared4[shared_offset4 + 32 * 6] = float4(\n                load_target[track6 + stride_mn * 0],\n                load_target[track6 + stride_mn * 1],\n                load_target[track6 + stride_mn * 2],\n                load_target[track6 + stride_mn * 3]\n            );\n        #endif\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            );\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            );\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            );\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            );\n    #endif\n\n            k += 8;\n#else\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 3]\n            );\n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 3]\n            );\n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 3]\n            );\n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 3]\n            );\n            k += 2;\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            );\n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            );\n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            );\n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            );\n            k += 2;\n    #endif\n#endif\n        }\n\n        threadgroup_barrier(mem_flags::mem_threadgroup);\n\n        {\n            for (int k_sub = 0; k_sub < 8; k_sub++)\n            {\n                float4 a00 = shared4[32 * k_sub + read_A_offset4 + 0];\n                float4 a01 = shared4[32 * k_sub + read_A_offset4 + 1];\n                float4 b00 = shared4[32 * k_sub + read_B_offset4 + 0];\n                float4 b01 = shared4[32 * k_sub + read_B_offset4 + 1];\n\n                result[4][0]  += b00[0] * a00[2];\n                result[4][1]  += b00[1] * a00[2];\n                result[0][1]  += b00[1] * a00[0];\n                result[0][0]  += b00[0] * a00[0];\n                result[6][0]  += b00[0] * a00[3];\n                result[6][1]  += b00[1] * a00[3];\n                result[2][1]  += b00[1] * a00[1];\n                result[2][0]  += b00[0] * a00[1];\n                result[12][0] += b00[0] * a01[2];\n                result[12][1] += b00[1] * a01[2];\n                result[8][1]  += b00[1] * a01[0];\n                result[8][0]  += b00[0] * a01[0];\n                result[14][0] += b00[0] * a01[3];\n                result[14][1] += b00[1] * a01[3];\n                result[10][1] += b00[1] * a01[1];\n                result[10][0] += b00[0] * a01[1];\n\n                result[14][2] += b00[2] * a01[3];\n                result[14][3] += b00[3] * a01[3];\n                result[10][3] += b00[3] * a01[1];\n                result[10][2] += b00[2] * a01[1];\n                result[12][2] += b00[2] * a01[2];\n                result[12][3] += b00[3] * a01[2];\n                result[8][3]  += b00[3] * a01[0];\n                result[8][2]  += b00[2] * a01[0];\n                result[6][2]  += b00[2] * a00[3];\n                result[6][3]  += b00[3] * a00[3];\n                result[2][3]  += b00[3] * a00[1];\n                result[2][2]  += b00[2] * a00[1];\n                result[4][2]  += b00[2] * a00[2];\n                result[4][3]  += b00[3] * a00[2];\n                result[0][3]  += b00[3] * a00[0];\n                result[0][2]  += b00[2] * a00[0];\n\n                result[5][0]  += b01[0] * a00[2];\n                result[5][1]  += b01[1] * a00[2];\n                result[1][1]  += b01[1] * a00[0];\n                result[1][0]  += b01[0] * a00[0];\n                result[7][0]  += b01[0] * a00[3];\n                result[7][1]  += b01[1] * a00[3];\n                result[3][1]  += b01[1] * a00[1];\n                result[3][0]  += b01[0] * a00[1];\n                result[13][0] += b01[0] * a01[2];\n                result[13][1] += b01[1] * a01[2];\n                result[9][1]  += b01[1] * a01[0];\n                result[9][0]  += b01[0] * a01[0];\n                result[15][0] += b01[0] * a01[3];\n                result[15][1] += b01[1] * a01[3];\n                result[11][1] += b01[1] * a01[1];\n                result[11][0] += b01[0] * a01[1];\n\n                result[15][2] += b01[2] * a01[3];\n                result[15][3] += b01[3] * a01[3];\n                result[11][3] += b01[3] * a01[1];\n                result[11][2] += b01[2] * a01[1];\n                result[13][2] += b01[2] * a01[2];\n                result[13][3] += b01[3] * a01[2];\n                result[9][3]  += b01[3] * a01[0];\n                result[9][2]  += b01[2] * a01[0];\n                result[7][2]  += b01[2] * a00[3];\n                result[7][3]  += b01[3] * a00[3];\n                result[3][3]  += b01[3] * a00[1];\n                result[3][2]  += b01[2] * a00[1];\n                result[5][2]  += b01[2] * a00[2];\n                result[5][3]  += b01[3] * a00[2];\n                result[1][3]  += b01[3] * a00[0];\n                result[1][2]  += b01[2] * a00[0];\n            }\n        }\n\n        shared_offset4 ^= 32 * 8;\n        read_A_offset4 ^= 32 * 8;\n        read_B_offset4 ^= 32 * 8;\n        track0 += stride_k * 8;\n        track2 += stride_k * 8;\n        track4 += stride_k * 8;\n        track6 += stride_k * 8;\n    }\n\n    {\n\n#if OPTIMIZE && N_DIVIDABLE_BY_64\n        device float4 *C4 = (device float4 *)((static_buffer + meta_buffer[2]));\n        const int N4 = N >> 2;\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n\n    #if !M_DIVIDABLE_BY_64\n            if (m >= M) continue;\n    #endif\n\n            const int n = group_position.y * 16 + n_offset * 2;\n            float4 result0 = result[m_sub * 2 + 0];\n            float4 result1 = result[m_sub * 2 + 1];\n\n            C4[m * N4 + n + 0] = result0;\n            C4[m * N4 + n + 1] = result1;\n\n            m++;\n        }\n#else\n        device float *C = (static_buffer + meta_buffer[2]);\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n            int n = group_position.y * 64 + n_offset * 8;\n\n            for (int n_sub1 = 0; n_sub1 < 2; n_sub1++)\n            {\n                for (int n_sub2 = 0; n_sub2 < 4; n_sub2++)\n                {\n\n    #if OPTIMIZE && M_DIVIDABLE_BY_64\n                    (         n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2]) : 0;\n    #else\n                    (m < M && n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2]) : 0;\n    #endif\n                    n++;\n                }\n            }\n\n            m++;\n        }\n#endif\n\n    }\n\n#undef M_DIVIDABLE_BY_64\n#undef N_DIVIDABLE_BY_64\n#undef K_DIVIDABLE_BY_8\n#undef A_STRIDE_K\n#undef B_STRIDE_K\n#undef A_STRIDE_M\n#undef B_STRIDE_N\n}\n\n\nkernel void col2im_3257ca943e22088b2d823352586af59c3843348db068253d4bb00a88(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint index[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float *col = (static_buffer + meta_buffer[1]);\n    device float *im = (static_buffer + meta_buffer[0]);\n\n    const int N = meta_buffer[2];\n    const int C1 = meta_buffer[5];\n    const int H1 = meta_buffer[6];\n    const int W1 = meta_buffer[7];\n    const int H2 = meta_buffer[3];\n    const int W2 = meta_buffer[4];\n    const int KH = meta_buffer[8];\n    const int KW = meta_buffer[9];\n    const int SH = meta_buffer[10];\n    const int SW = meta_buffer[11];\n    const int PH = meta_buffer[12];\n    const int PW = meta_buffer[13];\n\n    for (int gid = index; gid < N*H1*W1*C1; gid += num_threads) {\n        const int c1 = gid % C1;\n        const int w1 = gid / C1 % W1;\n        const int h1 = gid / C1 / W1 % H1;\n        const int n  = gid / C1 / W1 / H1;\n\n        float sum = 0;\n\n        for (int kh = 0; kh < KH; kh++) {\n            const int h2 = (h1 + PH - kh) / SH;\n            if ((h1 + PH - kh) % SH != 0 || h2 < 0 || h2 >= H2) continue;\n\n            for (int kw = 0; kw < KW; kw++) {\n                const int w2 = (w1 + PW - kw) / SW;\n                if ((w1 + PW - kw) % SW != 0 || w2 < 0 || w2 >= W2) continue;\n\n                sum += col[((((n * H2 + h2) * W2 + w2) * KH + kh) * KW + kw) * C1 + c1];\n            }\n        }\n\n        im[gid] = sum;\n    }\n}\n\n\nkernel void fusedelementwise_071e9e643bda5728250f18bab130075e36982c329b657b535613809e(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    const device float * v3 = (static_buffer + meta_buffer[2]);\n    device float * v4 = (static_buffer + meta_buffer[3]);\n    const int v5 = meta_buffer[4];\n    const int v6 = meta_buffer[5];\n    const int D0 = meta_buffer[6];\n    const int D1 = meta_buffer[7];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v7 = v1[d0];\n        const float v8 = v2[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            const float v9 = v3[d0 + d1*v5];\n            float v10;\n            {\n                v10 = v9 * v7;\n            }\n            float v11;\n            {\n                v11 = v10 + v8;\n            }\n            float v12;\n            {\n                v12 = v11 > 0 ? v11 : 0;\n            }\n            v4[d0*v6 + d1] = v12;\n        }\n    }\n}\n\n\nkernel void concat_0cb9f9d392043db66774e6467cfac0f522a125ce7edf35b200ce4d41(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint index[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    device float *y = (static_buffer + meta_buffer[0]);\n    const char N = meta_buffer[2];\n    const char D = meta_buffer[1];\n    const device int *y_offsets = (&(meta_buffer[23]));\n    const device int *x_shapes = (&(meta_buffer[15]));\n    const device int *x_strides_in_y = (&(meta_buffer[7]));\n\n    int x_index = index;\n\n    for (int n = 0; n < N; n++) {\n        const device float *x = (meta_buffer[3+2+ (n)] ? static_buffer : dynamic_buffer) + meta_buffer[3 + (n)];\n        const int y_offset = y_offsets[n];\n        const device int *x_shape = x_shapes + n*D;\n        const device int *x_stride_in_y = x_strides_in_y + n*D;\n\n        int x_size = 1;\n        for (int d = 0; d < D; d++) {\n            x_size *= x_shape[d];\n        }\n\n        while (x_index < x_size) {\n            int y_index = y_offset;\n            int s = x_index;\n            for (int d = D-1; d >= 0; d--) {\n                y_index += x_stride_in_y[d] * (s % x_shape[d]);\n                s /= x_shape[d];\n            }\n\n            y[y_index] = x[x_index];\n\n            x_index += num_threads;\n        }\n\n        x_index -= x_size;\n    }\n}\n\n\nkernel void fusedelementwise_877266ddf4a91766dc41414af7f3fbe0c42723033e725bca6eb1fa87(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    const device float * v3 = (static_buffer + meta_buffer[2]);\n    device float * v4 = (static_buffer + meta_buffer[3]);\n    const int v5 = meta_buffer[4];\n    const int v6 = meta_buffer[5];\n    const int D0 = meta_buffer[6];\n    const int D1 = meta_buffer[7];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v7 = v1[d0];\n        const float v8 = v2[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            const float v9 = v3[d0 + d1*v5];\n            float v10;\n            {\n                v10 = v9 * v8;\n            }\n            float v11;\n            {\n                v11 = v10 + v7;\n            }\n            float v12;\n            {\n                v12 = v11 > 0 ? v11 : 0;\n            }\n            v4[d0*v6 + d1] = v12;\n        }\n    }\n}\n\n\nkernel void tensordot_488954f1cb868fb263cb3fa8afa4357054169df3d2df0ca624f30099(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint index[[thread_index_in_threadgroup]],\n                          uint2 group_position[[threadgroup_position_in_grid]])\n{\n#define M_DIVIDABLE_BY_64 1\n#define N_DIVIDABLE_BY_64 0\n#define K_DIVIDABLE_BY_8 1\n\n#define A_STRIDE_K M\n#define A_STRIDE_M 1\n\n#define B_STRIDE_K N\n#define B_STRIDE_N 1\n\n#if K_DIVIDABLE_BY_8 && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64 && OPTIMIZE\n    const device float4 *load_target4 = (index & 32)\n        ? (const device float4 *)((static_buffer + meta_buffer[1]))\n        : (const device float4 *)((static_buffer + meta_buffer[0]));\n#else\n    const device float *load_target = (index & 32)\n        ? ((static_buffer + meta_buffer[1]))\n        : ((static_buffer + meta_buffer[0]));\n#endif\n\n    const int M = meta_buffer[3];\n    const int N = meta_buffer[4];\n\n    const int K = meta_buffer[5];\n\n    threadgroup float4 shared4[32 * 8 * 2];\n\n    const int stride_k = (index & 32) ? B_STRIDE_K : A_STRIDE_K;\n    const int stride_mn = (index & 32) ? B_STRIDE_N : A_STRIDE_M;\n\n    const int m_offset = index & 7;\n    const int n_offset = index >> 3;\n\n    const int mn_load_offset = ((index & 32) ? group_position.y : group_position.x) * 64 + (index & 15) * 4;\n    const int k_load_offset = ((index & 16) ? 1 : 0);\n\n    int track0 = mn_load_offset * stride_mn + (k_load_offset + 0) * stride_k;\n    int track2 = track0 + 2 * stride_k;\n    int track4 = track0 + 4 * stride_k;\n    int track6 = track0 + 6 * stride_k;\n\n#if !OPTIMIZE || !M_DIVIDABLE_BY_64 || !N_DIVIDABLE_BY_64\n    const int max_MN = (index & 32) ? N : M;\n#endif\n\n    int shared_offset4 = ((index & 32) ? 16 : 0) + k_load_offset * 32 + (index & 15);\n    int read_A_offset4 = m_offset * 2;\n    int read_B_offset4 = n_offset * 2 + 16;\n\n    float4 result[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n    int k = 0;\n\n    while (k < K)\n    {\n        {\n#if OPTIMIZE && K_DIVIDABLE_BY_8\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n        #if OPTIMIZE\n            shared4[shared_offset4 + 32 * 0] = load_target4[track0 >> 2];\n            shared4[shared_offset4 + 32 * 2] = load_target4[track2 >> 2];\n            shared4[shared_offset4 + 32 * 4] = load_target4[track4 >> 2];\n            shared4[shared_offset4 + 32 * 6] = load_target4[track6 >> 2];\n        #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                load_target[track0 + stride_mn * 0],\n                load_target[track0 + stride_mn * 1],\n                load_target[track0 + stride_mn * 2],\n                load_target[track0 + stride_mn * 3]\n            );\n            shared4[shared_offset4 + 32 * 2] = float4(\n                load_target[track2 + stride_mn * 0],\n                load_target[track2 + stride_mn * 1],\n                load_target[track2 + stride_mn * 2],\n                load_target[track2 + stride_mn * 3]\n            );\n            shared4[shared_offset4 + 32 * 4] = float4(\n                load_target[track4 + stride_mn * 0],\n                load_target[track4 + stride_mn * 1],\n                load_target[track4 + stride_mn * 2],\n                load_target[track4 + stride_mn * 3]\n            );\n            shared4[shared_offset4 + 32 * 6] = float4(\n                load_target[track6 + stride_mn * 0],\n                load_target[track6 + stride_mn * 1],\n                load_target[track6 + stride_mn * 2],\n                load_target[track6 + stride_mn * 3]\n            );\n        #endif\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            );\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            );\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            );\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            );\n    #endif\n\n            k += 8;\n#else\n    #if OPTIMIZE && M_DIVIDABLE_BY_64 && N_DIVIDABLE_BY_64\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track0 + stride_mn * 3]\n            );\n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track2 + stride_mn * 3]\n            );\n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track4 + stride_mn * 3]\n            );\n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K) ? 0 : load_target[track6 + stride_mn * 3]\n            );\n            k += 2;\n    #else\n            shared4[shared_offset4 + 32 * 0] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track0 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track0 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track0 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track0 + stride_mn * 3]\n            );\n            k += 2;\n\n            shared4[shared_offset4 + 32 * 2] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track2 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track2 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track2 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track2 + stride_mn * 3]\n            );\n            k += 2;\n\n            shared4[shared_offset4 + 32 * 4] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track4 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track4 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track4 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track4 + stride_mn * 3]\n            );\n            k += 2;\n\n            shared4[shared_offset4 + 32 * 6] = float4(\n                (k + k_load_offset >= K || mn_load_offset + 0 >= max_MN) ? 0 : load_target[track6 + stride_mn * 0],\n                (k + k_load_offset >= K || mn_load_offset + 1 >= max_MN) ? 0 : load_target[track6 + stride_mn * 1],\n                (k + k_load_offset >= K || mn_load_offset + 2 >= max_MN) ? 0 : load_target[track6 + stride_mn * 2],\n                (k + k_load_offset >= K || mn_load_offset + 3 >= max_MN) ? 0 : load_target[track6 + stride_mn * 3]\n            );\n            k += 2;\n    #endif\n#endif\n        }\n\n        threadgroup_barrier(mem_flags::mem_threadgroup);\n\n        {\n            for (int k_sub = 0; k_sub < 8; k_sub++)\n            {\n                float4 a00 = shared4[32 * k_sub + read_A_offset4 + 0];\n                float4 a01 = shared4[32 * k_sub + read_A_offset4 + 1];\n                float4 b00 = shared4[32 * k_sub + read_B_offset4 + 0];\n                float4 b01 = shared4[32 * k_sub + read_B_offset4 + 1];\n\n                result[4][0]  += b00[0] * a00[2];\n                result[4][1]  += b00[1] * a00[2];\n                result[0][1]  += b00[1] * a00[0];\n                result[0][0]  += b00[0] * a00[0];\n                result[6][0]  += b00[0] * a00[3];\n                result[6][1]  += b00[1] * a00[3];\n                result[2][1]  += b00[1] * a00[1];\n                result[2][0]  += b00[0] * a00[1];\n                result[12][0] += b00[0] * a01[2];\n                result[12][1] += b00[1] * a01[2];\n                result[8][1]  += b00[1] * a01[0];\n                result[8][0]  += b00[0] * a01[0];\n                result[14][0] += b00[0] * a01[3];\n                result[14][1] += b00[1] * a01[3];\n                result[10][1] += b00[1] * a01[1];\n                result[10][0] += b00[0] * a01[1];\n\n                result[14][2] += b00[2] * a01[3];\n                result[14][3] += b00[3] * a01[3];\n                result[10][3] += b00[3] * a01[1];\n                result[10][2] += b00[2] * a01[1];\n                result[12][2] += b00[2] * a01[2];\n                result[12][3] += b00[3] * a01[2];\n                result[8][3]  += b00[3] * a01[0];\n                result[8][2]  += b00[2] * a01[0];\n                result[6][2]  += b00[2] * a00[3];\n                result[6][3]  += b00[3] * a00[3];\n                result[2][3]  += b00[3] * a00[1];\n                result[2][2]  += b00[2] * a00[1];\n                result[4][2]  += b00[2] * a00[2];\n                result[4][3]  += b00[3] * a00[2];\n                result[0][3]  += b00[3] * a00[0];\n                result[0][2]  += b00[2] * a00[0];\n\n                result[5][0]  += b01[0] * a00[2];\n                result[5][1]  += b01[1] * a00[2];\n                result[1][1]  += b01[1] * a00[0];\n                result[1][0]  += b01[0] * a00[0];\n                result[7][0]  += b01[0] * a00[3];\n                result[7][1]  += b01[1] * a00[3];\n                result[3][1]  += b01[1] * a00[1];\n                result[3][0]  += b01[0] * a00[1];\n                result[13][0] += b01[0] * a01[2];\n                result[13][1] += b01[1] * a01[2];\n                result[9][1]  += b01[1] * a01[0];\n                result[9][0]  += b01[0] * a01[0];\n                result[15][0] += b01[0] * a01[3];\n                result[15][1] += b01[1] * a01[3];\n                result[11][1] += b01[1] * a01[1];\n                result[11][0] += b01[0] * a01[1];\n\n                result[15][2] += b01[2] * a01[3];\n                result[15][3] += b01[3] * a01[3];\n                result[11][3] += b01[3] * a01[1];\n                result[11][2] += b01[2] * a01[1];\n                result[13][2] += b01[2] * a01[2];\n                result[13][3] += b01[3] * a01[2];\n                result[9][3]  += b01[3] * a01[0];\n                result[9][2]  += b01[2] * a01[0];\n                result[7][2]  += b01[2] * a00[3];\n                result[7][3]  += b01[3] * a00[3];\n                result[3][3]  += b01[3] * a00[1];\n                result[3][2]  += b01[2] * a00[1];\n                result[5][2]  += b01[2] * a00[2];\n                result[5][3]  += b01[3] * a00[2];\n                result[1][3]  += b01[3] * a00[0];\n                result[1][2]  += b01[2] * a00[0];\n            }\n        }\n\n        shared_offset4 ^= 32 * 8;\n        read_A_offset4 ^= 32 * 8;\n        read_B_offset4 ^= 32 * 8;\n        track0 += stride_k * 8;\n        track2 += stride_k * 8;\n        track4 += stride_k * 8;\n        track6 += stride_k * 8;\n    }\n\n    {\n\n#if OPTIMIZE && N_DIVIDABLE_BY_64\n        device float4 *C4 = (device float4 *)((static_buffer + meta_buffer[2]));\n        const int N4 = N >> 2;\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n\n    #if !M_DIVIDABLE_BY_64\n            if (m >= M) continue;\n    #endif\n\n            const int n = group_position.y * 16 + n_offset * 2;\n            float4 result0 = result[m_sub * 2 + 0];\n            float4 result1 = result[m_sub * 2 + 1];\n\n            C4[m * N4 + n + 0] = result0;\n            C4[m * N4 + n + 1] = result1;\n\n            m++;\n        }\n#else\n        device float *C = (static_buffer + meta_buffer[2]);\n        int m = group_position.x * 64 + m_offset * 8;\n        for (int m_sub = 0; m_sub < 8; m_sub++)\n        {\n            int n = group_position.y * 64 + n_offset * 8;\n\n            for (int n_sub1 = 0; n_sub1 < 2; n_sub1++)\n            {\n                for (int n_sub2 = 0; n_sub2 < 4; n_sub2++)\n                {\n\n    #if OPTIMIZE && M_DIVIDABLE_BY_64\n                    (         n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2]) : 0;\n    #else\n                    (m < M && n < N) ? (C[m * N + n] = result[m_sub * 2 + n_sub1][n_sub2]) : 0;\n    #endif\n                    n++;\n                }\n            }\n\n            m++;\n        }\n#endif\n\n    }\n\n#undef M_DIVIDABLE_BY_64\n#undef N_DIVIDABLE_BY_64\n#undef K_DIVIDABLE_BY_8\n#undef A_STRIDE_K\n#undef B_STRIDE_K\n#undef A_STRIDE_M\n#undef B_STRIDE_N\n}\n\n\nkernel void fusedelementwise_2eacd48a205306dbce31b4d42160b62844df32217295ae8f72f241ff(device float * static_buffer[[buffer(0)]],\n                          device float * dynamic_buffer[[buffer(1)]],\n                          const device int * meta_buffer [[buffer(2)]],\n                          uint gid[[thread_position_in_grid]],\n                          uint num_threads[[threads_per_grid]])\n{\n    const device float * v1 = (static_buffer + meta_buffer[0]);\n    const device float * v2 = (static_buffer + meta_buffer[1]);\n    device float * v3 = (static_buffer + meta_buffer[2]);\n    const int v4 = meta_buffer[3];\n    const int v5 = meta_buffer[4];\n    const int D0 = meta_buffer[5];\n    const int D1 = meta_buffer[6];\n    int d0;\n    for (d0 = ((num_threads > 8) ? (gid % (num_threads / 8)) : 0); d0 < D0; d0 += ((num_threads > 8) ? (num_threads / 8) : 1)) {\n        const float v6 = v1[d0];\n        int d1;\n        for (d1 = ((num_threads > 8) ? (gid / (num_threads / 8)) : 0); d1 < D1; d1 += ((num_threads > 8) ? 8 : 1)) {\n            const float v7 = v2[d0 + d1*v4];\n            float v8;\n            {\n                v8 = v7 + v6;\n            }\n            float v9;\n            {\n                v9 = (v8 >= 10.0 ? 1.0 : tanh(v8));\n            }\n            v3[d0*v5 + d1] = v9;\n        }\n    }\n}\n",
  "exec_infos": [
    {
      "entry_func_name": "transpose_1a0fbadea0475062956fc679399ce2f40129cb877aec049982efb309",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        51,
        248,
        14,
        131,
        51,
        254,
        14,
        0,
        0,
        1,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        0,
        0,
        1,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_9b539f2f74232353e897aa9134c69cfa1ee49d2b6fa3daf025ab98c3",
      "threadgroups_per_grid": {
        "width": 66564,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        51,
        254,
        14,
        131,
        51,
        62,
        14,
        1,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "tensordot_27f826931ad3bbbc871d7c8749f50988981500cf1d2bdbdb0e7e1157",
      "threadgroups_per_grid": {
        "width": 1024,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        51,
        62,
        14,
        0,
        0,
        0,
        0,
        131,
        51,
        254,
        11,
        0,
        0,
        1,
        0,
        64,
        0,
        0,
        0,
        27,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_7021fa13d8ceacf13894bee6562fcff147688e654e265c301d0aeaf6",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        192,
        6,
        0,
        0,
        131,
        51,
        254,
        11,
        131,
        51,
        62,
        12,
        64,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        64,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        205,
        204,
        76,
        62
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "transpose_1a0fbadea0475062956fc679399ce2f40129cb877aec049982efb309",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        51,
        62,
        12,
        131,
        51,
        190,
        12,
        0,
        0,
        1,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        0,
        1,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_9b539f2f74232353e897aa9134c69cfa1ee49d2b6fa3daf025ab98c3",
      "threadgroups_per_grid": {
        "width": 66564,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        51,
        190,
        12,
        131,
        51,
        190,
        8,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        128,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "tensordot_291ea7d32ad11e41e6bd4219499a657cb96247731a43990b62e2f287",
      "threadgroups_per_grid": {
        "width": 256,
        "height": 2,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        51,
        190,
        8,
        0,
        7,
        0,
        0,
        131,
        51,
        30,
        14,
        0,
        64,
        0,
        0,
        128,
        0,
        0,
        0,
        0,
        4,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_7021fa13d8ceacf13894bee6562fcff147688e654e265c301d0aeaf6",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        0,
        7,
        2,
        0,
        131,
        51,
        30,
        14,
        131,
        51,
        62,
        13,
        128,
        0,
        0,
        0,
        0,
        64,
        0,
        0,
        128,
        0,
        0,
        0,
        0,
        64,
        0,
        0,
        205,
        204,
        76,
        62
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "transpose_1a0fbadea0475062956fc679399ce2f40129cb877aec049982efb309",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        51,
        62,
        13,
        131,
        51,
        94,
        13,
        0,
        64,
        0,
        0,
        128,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        0,
        64,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_9b539f2f74232353e897aa9134c69cfa1ee49d2b6fa3daf025ab98c3",
      "threadgroups_per_grid": {
        "width": 16900,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        51,
        94,
        13,
        131,
        51,
        190,
        9,
        1,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "tensordot_291ea7d32ad11e41e6bd4219499a657cb96247731a43990b62e2f287",
      "threadgroups_per_grid": {
        "width": 64,
        "height": 4,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        51,
        190,
        9,
        128,
        7,
        2,
        0,
        131,
        51,
        89,
        14,
        0,
        16,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        8,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_7021fa13d8ceacf13894bee6562fcff147688e654e265c301d0aeaf6",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        128,
        7,
        10,
        0,
        131,
        51,
        89,
        14,
        131,
        51,
        105,
        14,
        0,
        1,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        16,
        0,
        0,
        205,
        204,
        76,
        62
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "transpose_1a0fbadea0475062956fc679399ce2f40129cb877aec049982efb309",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        51,
        105,
        14,
        131,
        51,
        137,
        14,
        0,
        16,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        16,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_9b539f2f74232353e897aa9134c69cfa1ee49d2b6fa3daf025ab98c3",
      "threadgroups_per_grid": {
        "width": 4356,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        51,
        137,
        14,
        131,
        51,
        126,
        11,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        32,
        0,
        0,
        0,
        32,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "tensordot_291ea7d32ad11e41e6bd4219499a657cb96247731a43990b62e2f287",
      "threadgroups_per_grid": {
        "width": 16,
        "height": 8,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        51,
        126,
        11,
        128,
        8,
        10,
        0,
        131,
        51,
        201,
        14,
        0,
        4,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        16,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_7021fa13d8ceacf13894bee6562fcff147688e654e265c301d0aeaf6",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        128,
        8,
        42,
        0,
        131,
        51,
        201,
        14,
        131,
        51,
        209,
        14,
        0,
        2,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        4,
        0,
        0,
        205,
        204,
        76,
        62
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "transpose_1a0fbadea0475062956fc679399ce2f40129cb877aec049982efb309",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        51,
        209,
        14,
        131,
        51,
        217,
        14,
        0,
        4,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        4,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_9b539f2f74232353e897aa9134c69cfa1ee49d2b6fa3daf025ab98c3",
      "threadgroups_per_grid": {
        "width": 1156,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        51,
        217,
        14,
        131,
        51,
        190,
        13,
        1,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        32,
        0,
        0,
        0,
        32,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "tensordot_291ea7d32ad11e41e6bd4219499a657cb96247731a43990b62e2f287",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 8,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        51,
        190,
        13,
        128,
        10,
        42,
        0,
        131,
        51,
        7,
        15,
        0,
        1,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        32,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_7021fa13d8ceacf13894bee6562fcff147688e654e265c301d0aeaf6",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        128,
        10,
        106,
        0,
        131,
        51,
        7,
        15,
        131,
        51,
        9,
        15,
        0,
        2,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        1,
        0,
        0,
        205,
        204,
        76,
        62
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "transpose_1a0fbadea0475062956fc679399ce2f40129cb877aec049982efb309",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        51,
        9,
        15,
        131,
        51,
        11,
        15,
        0,
        1,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_9b539f2f74232353e897aa9134c69cfa1ee49d2b6fa3daf025ab98c3",
      "threadgroups_per_grid": {
        "width": 324,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        51,
        11,
        15,
        131,
        51,
        225,
        14,
        1,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        8,
        0,
        0,
        0,
        8,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "tensordot_291ea7d32ad11e41e6bd4219499a657cb96247731a43990b62e2f287",
      "threadgroups_per_grid": {
        "width": 1,
        "height": 8,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        51,
        225,
        14,
        128,
        12,
        106,
        0,
        131,
        51,
        18,
        15,
        64,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        32,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_7021fa13d8ceacf13894bee6562fcff147688e654e265c301d0aeaf6",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        128,
        12,
        170,
        0,
        131,
        51,
        18,
        15,
        131,
        179,
        18,
        15,
        0,
        2,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        64,
        0,
        0,
        0,
        205,
        204,
        76,
        62
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "transpose_1a0fbadea0475062956fc679399ce2f40129cb877aec049982efb309",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        179,
        18,
        15,
        131,
        51,
        19,
        15,
        64,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        64,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_9b539f2f74232353e897aa9134c69cfa1ee49d2b6fa3daf025ab98c3",
      "threadgroups_per_grid": {
        "width": 100,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        51,
        19,
        15,
        131,
        51,
        1,
        15,
        1,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        8,
        0,
        0,
        0,
        8,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "tensordot_8d766979cae5f29c01864384bf3bb8b079fcad4e7542a36c6fc3f956",
      "threadgroups_per_grid": {
        "width": 1,
        "height": 8,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        51,
        1,
        15,
        128,
        14,
        170,
        0,
        131,
        243,
        19,
        15,
        16,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        32,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_7021fa13d8ceacf13894bee6562fcff147688e654e265c301d0aeaf6",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        128,
        14,
        234,
        0,
        131,
        243,
        19,
        15,
        131,
        19,
        20,
        15,
        0,
        2,
        0,
        0,
        16,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        16,
        0,
        0,
        0,
        205,
        204,
        76,
        62
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "transpose_1a0fbadea0475062956fc679399ce2f40129cb877aec049982efb309",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        19,
        20,
        15,
        131,
        51,
        20,
        15,
        16,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        16,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_9b539f2f74232353e897aa9134c69cfa1ee49d2b6fa3daf025ab98c3",
      "threadgroups_per_grid": {
        "width": 36,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        51,
        20,
        15,
        131,
        51,
        16,
        15,
        1,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "tensordot_8d766979cae5f29c01864384bf3bb8b079fcad4e7542a36c6fc3f956",
      "threadgroups_per_grid": {
        "width": 1,
        "height": 8,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        51,
        16,
        15,
        128,
        16,
        234,
        0,
        131,
        147,
        20,
        15,
        4,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        32,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_7021fa13d8ceacf13894bee6562fcff147688e654e265c301d0aeaf6",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        128,
        16,
        42,
        1,
        131,
        147,
        20,
        15,
        131,
        155,
        20,
        15,
        0,
        2,
        0,
        0,
        4,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        4,
        0,
        0,
        0,
        205,
        204,
        76,
        62
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "tensordot_8d766979cae5f29c01864384bf3bb8b079fcad4e7542a36c6fc3f956",
      "threadgroups_per_grid": {
        "width": 1,
        "height": 128,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        155,
        20,
        15,
        128,
        18,
        42,
        1,
        131,
        179,
        16,
        15,
        4,
        0,
        0,
        0,
        0,
        32,
        0,
        0,
        0,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "col2im_3257ca943e22088b2d823352586af59c3843348db068253d4bb00a88",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        83,
        20,
        15,
        131,
        179,
        16,
        15,
        1,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_071e9e643bda5728250f18bab130075e36982c329b657b535613809e",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        128,
        20,
        106,
        1,
        128,
        18,
        106,
        1,
        131,
        83,
        20,
        15,
        131,
        115,
        20,
        15,
        0,
        2,
        0,
        0,
        16,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        16,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "concat_0cb9f9d392043db66774e6467cfac0f522a125ce7edf35b200ce4d41",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        179,
        19,
        15,
        4,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        131,
        115,
        20,
        15,
        131,
        19,
        20,
        15,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        32,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "tensordot_8d766979cae5f29c01864384bf3bb8b079fcad4e7542a36c6fc3f956",
      "threadgroups_per_grid": {
        "width": 1,
        "height": 128,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        179,
        19,
        15,
        128,
        22,
        106,
        1,
        131,
        51,
        5,
        15,
        16,
        0,
        0,
        0,
        0,
        32,
        0,
        0,
        0,
        4,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "col2im_3257ca943e22088b2d823352586af59c3843348db068253d4bb00a88",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        51,
        17,
        15,
        131,
        51,
        5,
        15,
        1,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        8,
        0,
        0,
        0,
        8,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_071e9e643bda5728250f18bab130075e36982c329b657b535613809e",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        128,
        24,
        234,
        1,
        128,
        22,
        234,
        1,
        131,
        51,
        17,
        15,
        131,
        179,
        17,
        15,
        0,
        2,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        64,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "concat_0cb9f9d392043db66774e6467cfac0f522a125ce7edf35b200ce4d41",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        51,
        15,
        15,
        4,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        131,
        179,
        17,
        15,
        131,
        179,
        18,
        15,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        8,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        8,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        8,
        0,
        0,
        0,
        8,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        8,
        0,
        0,
        0,
        8,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        128,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "tensordot_291ea7d32ad11e41e6bd4219499a657cb96247731a43990b62e2f287",
      "threadgroups_per_grid": {
        "width": 1,
        "height": 128,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        51,
        15,
        15,
        128,
        26,
        234,
        1,
        131,
        51,
        233,
        14,
        64,
        0,
        0,
        0,
        0,
        32,
        0,
        0,
        0,
        4,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "col2im_3257ca943e22088b2d823352586af59c3843348db068253d4bb00a88",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        51,
        13,
        15,
        131,
        51,
        233,
        14,
        1,
        0,
        0,
        0,
        8,
        0,
        0,
        0,
        8,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_071e9e643bda5728250f18bab130075e36982c329b657b535613809e",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        128,
        28,
        106,
        2,
        128,
        26,
        106,
        2,
        131,
        51,
        13,
        15,
        131,
        51,
        3,
        15,
        0,
        2,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "concat_0cb9f9d392043db66774e6467cfac0f522a125ce7edf35b200ce4d41",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        51,
        241,
        14,
        4,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        131,
        51,
        3,
        15,
        131,
        51,
        9,
        15,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        16,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        16,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        2,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "tensordot_291ea7d32ad11e41e6bd4219499a657cb96247731a43990b62e2f287",
      "threadgroups_per_grid": {
        "width": 4,
        "height": 128,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        51,
        241,
        14,
        128,
        30,
        106,
        2,
        131,
        51,
        126,
        13,
        0,
        1,
        0,
        0,
        0,
        32,
        0,
        0,
        0,
        4,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "col2im_3257ca943e22088b2d823352586af59c3843348db068253d4bb00a88",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        51,
        185,
        14,
        131,
        51,
        126,
        13,
        1,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        32,
        0,
        0,
        0,
        32,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_071e9e643bda5728250f18bab130075e36982c329b657b535613809e",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        128,
        32,
        234,
        2,
        128,
        30,
        234,
        2,
        131,
        51,
        185,
        14,
        131,
        51,
        193,
        14,
        0,
        2,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        4,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "concat_0cb9f9d392043db66774e6467cfac0f522a125ce7edf35b200ce4d41",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        51,
        121,
        14,
        4,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        131,
        51,
        193,
        14,
        131,
        51,
        209,
        14,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        32,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        32,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        32,
        0,
        0,
        0,
        32,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        32,
        0,
        0,
        0,
        32,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        8,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "tensordot_291ea7d32ad11e41e6bd4219499a657cb96247731a43990b62e2f287",
      "threadgroups_per_grid": {
        "width": 16,
        "height": 64,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        51,
        121,
        14,
        128,
        34,
        234,
        2,
        131,
        51,
        62,
        11,
        0,
        4,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        4,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "col2im_3257ca943e22088b2d823352586af59c3843348db068253d4bb00a88",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        51,
        153,
        14,
        131,
        51,
        62,
        11,
        1,
        0,
        0,
        0,
        32,
        0,
        0,
        0,
        32,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_877266ddf4a91766dc41414af7f3fbe0c42723033e725bca6eb1fa87",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        128,
        34,
        42,
        3,
        128,
        35,
        42,
        3,
        131,
        51,
        153,
        14,
        131,
        51,
        169,
        14,
        0,
        1,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        16,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "concat_0cb9f9d392043db66774e6467cfac0f522a125ce7edf35b200ce4d41",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        51,
        158,
        13,
        4,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        131,
        51,
        169,
        14,
        131,
        51,
        105,
        14,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        64,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        16,
        0,
        0,
        64,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        16,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "tensordot_291ea7d32ad11e41e6bd4219499a657cb96247731a43990b62e2f287",
      "threadgroups_per_grid": {
        "width": 64,
        "height": 32,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        51,
        158,
        13,
        128,
        36,
        42,
        3,
        131,
        51,
        62,
        10,
        0,
        16,
        0,
        0,
        0,
        8,
        0,
        0,
        0,
        2,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "col2im_3257ca943e22088b2d823352586af59c3843348db068253d4bb00a88",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        51,
        222,
        13,
        131,
        51,
        62,
        10,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_071e9e643bda5728250f18bab130075e36982c329b657b535613809e",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        0,
        37,
        58,
        3,
        128,
        36,
        58,
        3,
        131,
        51,
        222,
        13,
        131,
        51,
        254,
        13,
        128,
        0,
        0,
        0,
        0,
        64,
        0,
        0,
        128,
        0,
        0,
        0,
        0,
        64,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "concat_0cb9f9d392043db66774e6467cfac0f522a125ce7edf35b200ce4d41",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        51,
        190,
        11,
        4,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        131,
        51,
        254,
        13,
        131,
        51,
        62,
        13,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        128,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        64,
        0,
        0,
        128,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        32,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "tensordot_291ea7d32ad11e41e6bd4219499a657cb96247731a43990b62e2f287",
      "threadgroups_per_grid": {
        "width": 256,
        "height": 16,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        51,
        190,
        11,
        128,
        37,
        58,
        3,
        131,
        51,
        190,
        7,
        0,
        64,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        1,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "col2im_3257ca943e22088b2d823352586af59c3843348db068253d4bb00a88",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        51,
        126,
        12,
        131,
        51,
        190,
        7,
        1,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        4,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_071e9e643bda5728250f18bab130075e36982c329b657b535613809e",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        192,
        37,
        62,
        3,
        128,
        37,
        62,
        3,
        131,
        51,
        126,
        12,
        131,
        51,
        254,
        12,
        64,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        64,
        0,
        0,
        0,
        0,
        0,
        1,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "concat_0cb9f9d392043db66774e6467cfac0f522a125ce7edf35b200ce4d41",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        51,
        190,
        10,
        4,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        131,
        51,
        254,
        12,
        131,
        51,
        62,
        12,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        128,
        0,
        1,
        0,
        0,
        0,
        0,
        128,
        0,
        0,
        128,
        0,
        0,
        0,
        0,
        0,
        128,
        0,
        1,
        0,
        0,
        0,
        0,
        128,
        0,
        0,
        128,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        64,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "im2col_9b539f2f74232353e897aa9134c69cfa1ee49d2b6fa3daf025ab98c3",
      "threadgroups_per_grid": {
        "width": 66564,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        51,
        190,
        10,
        131,
        51,
        62,
        3,
        1,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        3,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "tensordot_488954f1cb868fb263cb3fa8afa4357054169df3d2df0ca624f30099",
      "threadgroups_per_grid": {
        "width": 1024,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": 64,
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        131,
        51,
        62,
        3,
        0,
        38,
        62,
        3,
        131,
        51,
        245,
        14,
        0,
        0,
        1,
        0,
        3,
        0,
        0,
        0,
        128,
        4,
        0,
        0
      ],
      "unresolved_value_list": []
    },
    {
      "entry_func_name": "fusedelementwise_2eacd48a205306dbce31b4d42160b62844df32217295ae8f72f241ff",
      "threadgroups_per_grid": {
        "width": 8,
        "height": 1,
        "depth": 1
      },
      "threads_per_thread_group": {
        "width": {
          "eval": "placeholders['__MAX_THREADS_PER_THREADGROUP__'];"
        },
        "height": 1,
        "depth": 1
      },
      "meta_buffer": [
        128,
        51,
        62,
        3,
        131,
        51,
        245,
        14,
        131,
        51,
        251,
        14,
        3,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        3,
        0,
        0,
        0,
        0,
        0,
        1,
        0
      ],
      "unresolved_value_list": []
    }
  ],
  "weight_encoding": "eightbit",
  "memory_layout": {
    "static": {
      "size": 253010819,
      "allocations": {
        "a143": {
          "name": "a143",
          "offset": 251147139,
          "size": 196608
        },
        "a145": {
          "name": "a145",
          "offset": 251540355,
          "size": 196608
        },
        "a146": {
          "name": "a146",
          "offset": 238957443,
          "size": 1769472
        },
        "a147": {
          "name": "a147",
          "offset": 201208707,
          "size": 4194304
        },
        "a148": {
          "name": "a148",
          "offset": 205403011,
          "size": 4194304
        },
        "a149": {
          "name": "a149",
          "offset": 213791619,
          "size": 4194304
        },
        "a150": {
          "name": "a150",
          "offset": 146682755,
          "size": 16777216
        },
        "a151": {
          "name": "a151",
          "offset": 236860291,
          "size": 2097152
        },
        "a152": {
          "name": "a152",
          "offset": 222180227,
          "size": 2097152
        },
        "a153": {
          "name": "a153",
          "offset": 224277379,
          "size": 2097152
        },
        "a154": {
          "name": "a154",
          "offset": 163459971,
          "size": 8388608
        },
        "a155": {
          "name": "a155",
          "offset": 240726915,
          "size": 1048576
        },
        "a156": {
          "name": "a156",
          "offset": 241775491,
          "size": 1048576
        },
        "a157": {
          "name": "a157",
          "offset": 243872643,
          "size": 1048576
        },
        "a158": {
          "name": "a158",
          "offset": 192820099,
          "size": 4194304
        },
        "a159": {
          "name": "a159",
          "offset": 248066947,
          "size": 524288
        },
        "a160": {
          "name": "a160",
          "offset": 248591235,
          "size": 524288
        },
        "a161": {
          "name": "a161",
          "offset": 249115523,
          "size": 524288
        },
        "a162": {
          "name": "a162",
          "offset": 230568835,
          "size": 2097152
        },
        "a163": {
          "name": "a163",
          "offset": 252130179,
          "size": 131072
        },
        "a164": {
          "name": "a164",
          "offset": 252261251,
          "size": 131072
        },
        "a165": {
          "name": "a165",
          "offset": 252392323,
          "size": 131072
        },
        "a166": {
          "name": "a166",
          "offset": 249639811,
          "size": 524288
        },
        "a167": {
          "name": "a167",
          "offset": 252851075,
          "size": 32768
        },
        "a168": {
          "name": "a168",
          "offset": 252883843,
          "size": 32768
        },
        "a169": {
          "name": "a169",
          "offset": 252916611,
          "size": 32768
        },
        "a170": {
          "name": "a170",
          "offset": 251736963,
          "size": 131072
        },
        "a171": {
          "name": "a171",
          "offset": 252965763,
          "size": 8192
        },
        "a172": {
          "name": "a172",
          "offset": 252973955,
          "size": 8192
        },
        "a173": {
          "name": "a173",
          "offset": 252982147,
          "size": 8192
        },
        "a174": {
          "name": "a174",
          "offset": 252720003,
          "size": 32768
        },
        "a175": {
          "name": "a175",
          "offset": 253006723,
          "size": 2048
        },
        "a176": {
          "name": "a176",
          "offset": 253008771,
          "size": 2048
        },
        "a177": {
          "name": "a177",
          "offset": 252752771,
          "size": 32768
        },
        "a178": {
          "name": "a178",
          "offset": 252990339,
          "size": 8192
        },
        "a179": {
          "name": "a179",
          "offset": 252998531,
          "size": 8192
        },
        "a180": {
          "name": "a180",
          "offset": 252949379,
          "size": 16384
        },
        "a181": {
          "name": "a181",
          "offset": 251999107,
          "size": 131072
        },
        "a182": {
          "name": "a182",
          "offset": 252785539,
          "size": 32768
        },
        "a183": {
          "name": "a183",
          "offset": 252818307,
          "size": 32768
        },
        "a184": {
          "name": "a184",
          "offset": 252654467,
          "size": 65536
        },
        "a185": {
          "name": "a185",
          "offset": 250164099,
          "size": 524288
        },
        "a186": {
          "name": "a186",
          "offset": 252523395,
          "size": 131072
        },
        "a187": {
          "name": "a187",
          "offset": 251868035,
          "size": 131072
        },
        "a188": {
          "name": "a188",
          "offset": 250688387,
          "size": 262144
        },
        "a189": {
          "name": "a189",
          "offset": 226374531,
          "size": 2097152
        },
        "a190": {
          "name": "a190",
          "offset": 247018371,
          "size": 524288
        },
        "a191": {
          "name": "a191",
          "offset": 247542659,
          "size": 524288
        },
        "a192": {
          "name": "a192",
          "offset": 242824067,
          "size": 1048576
        },
        "a193": {
          "name": "a193",
          "offset": 188625795,
          "size": 4194304
        },
        "a194": {
          "name": "a194",
          "offset": 244921219,
          "size": 1048576
        },
        "a195": {
          "name": "a195",
          "offset": 245969795,
          "size": 1048576
        },
        "a196": {
          "name": "a196",
          "offset": 228471683,
          "size": 2097152
        },
        "a197": {
          "name": "a197",
          "offset": 171848579,
          "size": 8388608
        },
        "a198": {
          "name": "a198",
          "offset": 232665987,
          "size": 2097152
        },
        "a199": {
          "name": "a199",
          "offset": 234763139,
          "size": 2097152
        },
        "a200": {
          "name": "a200",
          "offset": 197014403,
          "size": 4194304
        },
        "a201": {
          "name": "a201",
          "offset": 129905539,
          "size": 16777216
        },
        "a202": {
          "name": "a202",
          "offset": 209597315,
          "size": 4194304
        },
        "a203": {
          "name": "a203",
          "offset": 217985923,
          "size": 4194304
        },
        "a204": {
          "name": "a204",
          "offset": 180237187,
          "size": 8388608
        },
        "a205": {
          "name": "a205",
          "offset": 54408067,
          "size": 75497472
        },
        "a206": {
          "name": "a206",
          "offset": 250950531,
          "size": 196608
        },
        "a144": {
          "name": "a144",
          "offset": 251343747,
          "size": 196608
        },
        "a104": {
          "name": "a104",
          "offset": 0,
          "size": 1728
        },
        "a105": {
          "name": "a105",
          "offset": 1728,
          "size": 64
        },
        "a106": {
          "name": "a106",
          "offset": 1792,
          "size": 131072
        },
        "a107": {
          "name": "a107",
          "offset": 132864,
          "size": 128
        },
        "a108": {
          "name": "a108",
          "offset": 132992,
          "size": 524288
        },
        "a109": {
          "name": "a109",
          "offset": 657280,
          "size": 256
        },
        "a110": {
          "name": "a110",
          "offset": 657536,
          "size": 2097152
        },
        "a111": {
          "name": "a111",
          "offset": 2754688,
          "size": 512
        },
        "a112": {
          "name": "a112",
          "offset": 2755200,
          "size": 4194304
        },
        "a113": {
          "name": "a113",
          "offset": 6949504,
          "size": 512
        },
        "a114": {
          "name": "a114",
          "offset": 6950016,
          "size": 4194304
        },
        "a115": {
          "name": "a115",
          "offset": 11144320,
          "size": 512
        },
        "a116": {
          "name": "a116",
          "offset": 11144832,
          "size": 4194304
        },
        "a117": {
          "name": "a117",
          "offset": 15339136,
          "size": 512
        },
        "a118": {
          "name": "a118",
          "offset": 15339648,
          "size": 4194304
        },
        "a119": {
          "name": "a119",
          "offset": 19533952,
          "size": 512
        },
        "a120": {
          "name": "a120",
          "offset": 19534464,
          "size": 4194304
        },
        "a121": {
          "name": "a121",
          "offset": 23728768,
          "size": 512
        },
        "a122": {
          "name": "a122",
          "offset": 23729280,
          "size": 512
        },
        "a123": {
          "name": "a123",
          "offset": 23729792,
          "size": 8388608
        },
        "a124": {
          "name": "a124",
          "offset": 32118400,
          "size": 512
        },
        "a125": {
          "name": "a125",
          "offset": 32118912,
          "size": 512
        },
        "a126": {
          "name": "a126",
          "offset": 32119424,
          "size": 8388608
        },
        "a127": {
          "name": "a127",
          "offset": 40508032,
          "size": 512
        },
        "a128": {
          "name": "a128",
          "offset": 40508544,
          "size": 512
        },
        "a129": {
          "name": "a129",
          "offset": 40509056,
          "size": 8388608
        },
        "a130": {
          "name": "a130",
          "offset": 48897664,
          "size": 512
        },
        "a131": {
          "name": "a131",
          "offset": 48898176,
          "size": 512
        },
        "a132": {
          "name": "a132",
          "offset": 48898688,
          "size": 4194304
        },
        "a133": {
          "name": "a133",
          "offset": 53092992,
          "size": 256
        },
        "a134": {
          "name": "a134",
          "offset": 53093248,
          "size": 256
        },
        "a135": {
          "name": "a135",
          "offset": 53093504,
          "size": 1048576
        },
        "a136": {
          "name": "a136",
          "offset": 54142080,
          "size": 128
        },
        "a137": {
          "name": "a137",
          "offset": 54142208,
          "size": 128
        },
        "a138": {
          "name": "a138",
          "offset": 54142336,
          "size": 262144
        },
        "a139": {
          "name": "a139",
          "offset": 54404480,
          "size": 64
        },
        "a140": {
          "name": "a140",
          "offset": 54404544,
          "size": 64
        },
        "a141": {
          "name": "a141",
          "offset": 54404608,
          "size": 3456
        },
        "a142": {
          "name": "a142",
          "offset": 54408064,
          "size": 3
        }
      }
    },
    "dynamic": {
      "size": 0,
      "allocations": {}
    }
  },
  "placeholders": {
    "__MAX_THREADS_PER_THREADGROUP__": null
  },
  "inputs": [
    "a143"
  ],
  "outputs": [
    "a144"
  ],
  "licenses": {
    "webdnn": "(C) Machine Intelligence Laboratory (The University of Tokyo), MIT License"
  }
}